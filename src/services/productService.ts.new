'use client'

import { Product } from '@/types/product';
import { 
    AddProductData, 
    UpdateProductData, 
    TodaysSalesSummary, 
    ProductSaleSummary, 
    TopSaleByQuantity, 
    ProductRevenueSummary 
} from './server/productService';

export async function getProducts(): Promise<Product[]> {
    const response = await fetch('/api/products');
    if (!response.ok) {
        throw new Error('Failed to fetch products');
    }
    return response.json();
}

export async function getBestSellingProducts(): Promise<Product[]> {
    const response = await fetch('/api/products?operation=bestSelling');
    if (!response.ok) {
        throw new Error('Failed to fetch best selling products');
    }
    return response.json();
}

export async function getMostRecentProduct(): Promise<Product | null> {
    const response = await fetch('/api/products?operation=mostRecent');
    if (!response.ok) {
        throw new Error('Failed to fetch most recent product');
    }
    return response.json();
}

export async function getProductById(productId: string): Promise<Product | null> {
    const response = await fetch(`/api/products?id=${productId}`);
    if (!response.ok) {
        if (response.status === 404) {
            return null;
        }
        throw new Error('Failed to fetch product');
    }
    return response.json();
}

export async function addProduct(productData: AddProductData): Promise<string> {
    const response = await fetch('/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(productData),
    });
    if (!response.ok) {
        throw new Error('Failed to add product');
    }
    const result = await response.json();
    return result.id;
}

export async function updateProduct(productId: string, productData: UpdateProductData): Promise<void> {
    const response = await fetch(`/api/products?id=${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(productData),
    });
    if (!response.ok) {
        throw new Error('Failed to update product');
    }
}

export async function deleteProduct(productId: string): Promise<void> {
    const response = await fetch(`/api/products?id=${productId}`, {
        method: 'DELETE',
    });
    if (!response.ok) {
        throw new Error('Failed to delete product');
    }
}

export async function getTodaysSalesSummary(): Promise<TodaysSalesSummary> {
    const response = await fetch('/api/products?operation=salesSummary');
    if (!response.ok) {
        throw new Error('Failed to fetch today\'s sales summary');
    }
    return response.json();
}

export async function getProductSalesSummary(
    limit?: number,
    startDate?: Date,
    endDate?: Date
): Promise<ProductSaleSummary[]> {
    let url = '/api/products?operation=productSalesSummary';
    if (limit) url += `&limitCount=${limit}`;
    if (startDate) url += `&startDate=${startDate.toISOString()}`;
    if (endDate) url += `&endDate=${endDate.toISOString()}`;

    const response = await fetch(url);
    if (!response.ok) {
        throw new Error('Failed to fetch product sales summary');
    }
    return response.json();
}

export async function getTopSalesByQuantity(
    limit?: number,
    startDate?: Date,
    endDate?: Date
): Promise<TopSaleByQuantity[]> {
    let url = '/api/products?operation=topSalesByQuantity';
    if (limit) url += `&limitCount=${limit}`;
    if (startDate) url += `&startDate=${startDate.toISOString()}`;
    if (endDate) url += `&endDate=${endDate.toISOString()}`;

    const response = await fetch(url);
    if (!response.ok) {
        throw new Error('Failed to fetch top sales by quantity');
    }
    return response.json();
}

export async function getProductRevenueSummary(
    limit?: number,
    startDate?: Date,
    endDate?: Date
): Promise<ProductRevenueSummary[]> {
    let url = '/api/products?operation=productRevenueSummary';
    if (limit) url += `&limitCount=${limit}`;
    if (startDate) url += `&startDate=${startDate.toISOString()}`;
    if (endDate) url += `&endDate=${endDate.toISOString()}`;

    const response = await fetch(url);
    if (!response.ok) {
        throw new Error('Failed to fetch product revenue summary');
    }
    return response.json();
}

export async function updateProductBestSellerStatus(productId: string, isBestSeller: boolean): Promise<void> {
    const response = await fetch(`/api/products?id=${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isBestSeller }),
    });
    if (!response.ok) {
        throw new Error('Failed to update product best seller status');
    }
}

export async function recordSaleAndUpdateStock(productId: string, quantitySold: number): Promise<void> {
    const response = await fetch('/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            operation: 'recordSale',
            productId,
            quantitySold,
        }),
    });
    if (!response.ok) {
        throw new Error('Failed to record sale and update stock');
    }
}
